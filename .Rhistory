{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map("r.squared")
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map("r.squared") %>%
bind_cols()
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map("r.squared") %>%
bind_cols()
map(x, log)
x <-
list (
1,
10
"a"
x <-
list (
1,
10
"a"
x <-
list (
1,
10,
"a"
)
map(x, log)
x %>%
map(safely(log))
x %>%
map(safely(log)) %>%
map("error")
x %>%
map(safely(log)) %>%
map("error") %>%
map(is.null)
mu <- list(-10000, 0, 10000)
sigma <- (1, 5, 20)
sigma <- (1, 5, 20)
sigma <- list(1, 5, 20)
map2(mu, sigma, rnorm, n=5)
n <- list(1, 5, 3)
?rnorm
list(
mean = mu,
sd = sigma,
n = n
)
list(
mean = mu,
sd = sigma,
n = n
)
list(
mean = mu,
sd = sigma,
n = n
) %>%
pmap(rnorm)
library(httr)
library(jsonlite)
install.packages(jsonlite)
library(ggplot2)
library(DescTools)
install.packages(DescTools)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
install.packages("httr", "jsonlite", "DescTools", "rlang", "lubridate", "anytime")
install.packages("httr", "jsonlite", "DescTools", "rlang", "lubridate", "anytime")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
install.packages("DescTools")
library(rlang)
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(magrittr)
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
library(lubridate)
library(anytime)
install.packages("lubridate")
install.packages("lubridate")
install.packages("anytime")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
# Allright - let's try submitting the query:
stations <-GQL(qry)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
View(stations)
length(stations)
length(stations[[1]])
stations[[1]]
stations[[1]][[1]]
stations[[1]][[1]] %>%
as_tibble()
stations %>%
as_tibble()
test <- stations %>%
as_tibble()
View(test)
\(x) map(x)
stations %>%
map(
{
\(x) map(x)
}
) %>%
as_tibble
stations %>%
as_tibble
stations[[1]][[1]] %>%
as_tibble()
View(stations)
as_tibble
\(x) map([[1]][(x))
\(x) map([[1]][(x)])
as_tibble
stations[[1]] %>%
map(as_tibble) %>%
bind_cols()
setwd("C:/Users/edvar/OneDrive/Dokumenter/BAN400/Assignment6/iterations-edvardlund")
return(query)
vol_cry <- function(id, from, to) {
query_t <- '{
trafficData(trafficRegistrationPointId: "%s") {
volume {
byHour(from: "%s", to: "%s") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}'}
query <- sprintf(query_t, id, from, to)
# Problem 4B
# Creating a function to return a query
vol_cry <- function(id, from, to) {
query_t <- '{
trafficData(trafficRegistrationPointId: "%s") {
volume {
byHour(from: "%s", to: "%s") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}'
query <- sprintf(query_t, id, from, to)
return(query)
}
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
library(tidyverse)
library(glue)
# Problem 4B
# Creating a function to return a query
vol_cry <- function(id, from, to) {
query_t <- '{
trafficData(trafficRegistrationPointId: "%s") {
volume {
byHour(from: "%s", to: "%s") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}'
query <- sprintf(query_t, id, from, to)
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
return(query)
library(glue)
# Problem 4B
# Creating a function to return a query
vol_qry <- function(id, from, to) {
query_t <- '{
trafficData(trafficRegistrationPointId: "%s") {
volume {
byHour(from: "%s", to: "%s") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}'
query <- sprintf(query_t, id, from, to)
return(query)
}
View(vol_cry)
View(vol_qry)
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
library(dplyr)
library(purrr)
library(tidyr)
library(lubridate)
# Function to transfrm metadata to a readable dataframe
transform_metadata_to_df <- function(metadata) {
transformed_data <- metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(
latestData,
1,
.default = NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(transformed_data)
}
#Function to return a date with the offset added
to_iso8601 <- function(datetime, offset_days) {
#Converting the inpu to a date-time object
datetime_obj <- as_datetime(datetime)
#Applying the offset
datetime_obj <- datetime_obj + days(offset_days)
#Formating the date-time as an ISO8601 string and append "Z"
iso8601_str <- format(datetime_obj, "%Y-%m-%dT%H:%M:%S") %>%
paste0("Z")
return(iso8601_str)
}
#Testing function
source('functions/data_transformations.r')
to_iso8601("2016-09-01 10:11:12", -4)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
# Function to transfrm metadata to a readable dataframe
transform_metadata_to_df <- function(metadata) {
transformed_data <- metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(
latestData,
1,
.default = NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(transformed_data)
}
to_iso8601 <- function(datetime, offset_days) {
#Converting the inpu to a date-time object
datetime_obj <- as_datetime(datetime)
#Applying the offset
datetime_obj <- datetime_obj + days(offset_days)
#Formating the date-time as an ISO8601 string and append "Z"
iso8601_str <- format(datetime_obj, "%Y-%m-%dT%H:%M:%S") %>%
paste0("Z")
return(iso8601_str)
}
#Testing function
source('functions/data_transformations.r')
library(dplyr)
library(purrr)
library(tidyr)
library(lubridate)
# Function to transfrm metadata to a readable dataframe
transform_metadata_to_df <- function(metadata) {
transformed_data <- metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(
latestData,
1,
.default = NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "UTC")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(transformed_data)
}
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
test_stations_metadata(stations_metadata_df)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
