library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
length(stations)
length(stations[[1]])
stations[[1]][[1]] %>%
as_tibble()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
pull()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
as.character()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
select(latestData) %>%
as.character()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
as.character()
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
select(latestData) %>%
pull() %>%
as.character()
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
select(latestData) %>%
pull() %>%
as.character() %>%
as.list()
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, "volumeByDay"))
#Fixing the columns
df_tmp <-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, "volumeByDay"))
#Fixing the columns
df_tmp <-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
#Fixing the columns
df_tmp <-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as.Date(latestData))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as.datetime(latestData))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as.datetime(latestData))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin"))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
head(1) %>%
pull(location)
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist))
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat")
)
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)
#Fixing the columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
# Can also do this easier with unnest_wider
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location)
# Can also do this easier with unnest_wider
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(location)
# Can also do this easier with unnest_wider
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData =
map_chr(
latestData,
1,
.default=NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("C:/Users/edvar/OneDrive/Dokumenter/BAN400/Assignment6/iterations-edvardlund")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
library(dplyr)
library(purrr)
library(tidyr)
library(lubridate)
library(dplyr)
library(purrr)
library(tidyr)
library(lubridate)
transform_metadata_to_dataframe <- function(metadata_list) {
transformed_data <- metadata_list %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(
latestData,
1,
.default = NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(transformed_data)
}
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
library(dplyr)
library(purrr)
library(tidyr)
library(lubridate)
transform_metadata_to_df <- function(metadata_list) {
transformed_data <- metadata_list %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(
latestData,
1,
.default = NA_character_
)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
return(transformed_data)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
# Let's try submitting the query:
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
